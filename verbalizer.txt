Nur zum Zwischenspeichern steht hier der Code, den ich den in den Verbalizer eingefügt habe, um per Avatar die Ressourcen zu verbalisieren:

    public static void main(String[] args) {
        SparqlEndpoint endpoint = SparqlEndpoint.getEndpointDBpedia();
        Verbalizer verbalizer = new Verbalizer(endpoint, "C:/Users/felix/Desktop/avatarcache", "C:/Program Files (x86)/WordNet/2.1");

        String[] resources = new String[] { "http://dbpedia.org/resource/Albert_Einstein", "http://dbpedia.org/resource/Michael_Jackson", "http://dbpedia.org/resource/Barack_Obama" , "http://dbpedia.org/resource/Angela_Merkel", "http://dbpedia.org/resource/Microsoft", "http://dbpedia.org/resource/Facebook" };
        LinkedList<Summary> summaries = new LinkedList<>();

        for (String resource: resources) {
            OWLIndividual ind = new OWLNamedIndividualImpl(IRI.create(resource));
            String summary = verbalizer.summarize(ind);
            Collection<Triple> triples = verbalizer.getSummaryTriples(ind);

            summaries.add(new Summary(summary, triples));
        }

        FileWriter fw = null;
        try {
            fw = new FileWriter("C:/users/felix/desktop/resources.csv");
            for (Summary summary: summaries) {
                fw.append(summary.printCsvLine());
            }
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("File writing error");
            return;
        } finally {
            try {
                fw.close();
            } catch (IOException | NullPointerException e) {}
        }
    }

    private static class Summary {
        private String summary;
        private Collection<Triple> cluster;
        public Summary(String summary, Collection<Triple> cluster) {
            this.summary = summary;
            this.cluster = cluster;
        }

        public String printCsvLine() {
            StringBuilder output = new StringBuilder();
            output.append(summary.toString());
            output.append(';');
            for (Triple triple: cluster) {
                output.append(triple.toString());
                output.append(';');
            }
            output.append('\n');

            return output.toString();
        }
    }